/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package au.edu.sydney.soft3202.task1;


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class ShoppingBasketTest {

    private ShoppingBasket sut;

    @BeforeEach
    public void createShoppingBasket() {
        sut = new ShoppingBasket();
    }

    @Test
    public void addItemNegative() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.addItem("apple", -1);
        });
    }

    @Test
    public void addNonExistentItem() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.addItem("mango", 1);
        });
    }

    @Test
    public void addNonExistentItemAndNegative() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.addItem("mango", -1);
        });
    }

    @Test
    public void addGreaterThenMaxInt() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.addItem("apple", Integer.MAX_VALUE + 1);
        });
    }

    @Test
    public void itemAtMaxCount() {
        sut.addItem("apple", Integer.MAX_VALUE);
        assertThrows(IllegalArgumentException.class, () -> {
            sut.addItem("apple", 1);
        });
    }

    @Test
    public void addNullItem() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.addItem(null, 1);
        });
    }

    @Test
    public void addNullItemAndNullCount() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.addItem(null, 0);
        });
    }

    @Test
    public void addItemValid() {
        sut.addItem("apple", 2);
        boolean inList = false;

        for (Map.Entry<String, Integer> entry : sut.getItems()) {
            if (entry.getKey().equals("apple") && entry.getValue() == 2) {
                inList = true;
            }
        }

        assertTrue(inList);
    }

    @Test
    public void removeNullItem() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.removeItem(null, 1);
        });
    }

    @Test
    public void removeNullItemAndNegative() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.removeItem(null, -1);
        });
    }

    @Test
    public void removeGreaterThenMaxInt() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.removeItem("apple", Integer.MAX_VALUE + 1);
        });
    }

    @Test
    public void itemAtZeroCount() {
        sut.addItem("apple", Integer.MAX_VALUE);
        assertTrue(sut.removeItem("apple", Integer.MAX_VALUE));
    }

    @Test
    public void removeNullItemAndNullCount() {
        assertThrows(IllegalArgumentException.class, () -> {
            sut.removeItem(null, 0);
        });
    }

    @Test
    public void removeNonExistentItem() {
        assertFalse(sut.removeItem("mango", 2));
    }

    @Test
    public void removeTooMany() {
        assertFalse(sut.removeItem("apple", 1));
    }

    @Test
    public void removeItemValid() {
        sut.addItem("apple", 2);
        boolean inList = false;

        for (Map.Entry<String, Integer> entry : sut.getItems()) {
            if (entry.getKey().equals("apple") && entry.getValue() == 2) {
                inList = true;
            }
        }

        assertTrue(inList);

        sut.removeItem("apple", 2);

        for (Map.Entry<String, Integer> entry : sut.getItems()) {
            if (entry.getKey().equals("apple") && entry.getValue() == 0) {
                inList = false;
            }
        }

        assertFalse(inList);
    }

    @Test
    public void removeItemValidWithCapitals() {
        sut.addItem("apple", 2);
        boolean inList = false;

        for (Map.Entry<String, Integer> entry : sut.getItems()) {
            if (entry.getKey().equals("apple") && entry.getValue() == 2) {
                inList = true;
            }
        }

        assertTrue(inList);

        sut.removeItem("APpLE", 2);

        for (Map.Entry<String, Integer> entry : sut.getItems()) {
            if (entry.getKey().equals("apple") && entry.getValue() == 0) {
                inList = false;
            }
        }

        assertFalse(inList);
    }



    @Test
    public void getItemsReturnsCopy() {
        sut.addItem("apple", 2);
        List<Map.Entry<String, Integer>> itemsList1 = sut.getItems();
        itemsList1.clear();
        assertEquals(0, itemsList1.size());

        boolean inList = false;

        for (Map.Entry<String, Integer> entry : sut.getItems()) {
            if (entry.getKey().equals("apple") && entry.getValue() == 2) {
                inList = true;
            }
        }

        assertTrue(inList);
    }

    @Test
    public void initialValueMustBeEmpty() {
        assertNull(sut.getValue());
    }

    @Test
    public void bananaValue() {
        sut.addItem("banana", 1);
        assertEquals(4.95, sut.getValue());
    }

    @Test
    public void fourBananaValue() {
        sut.addItem("banana", 4);
        assertEquals(4*4.95, sut.getValue());
    }

    @Test
    public void appleValue() {
        sut.addItem("apple", 1);
        assertEquals(2.5, sut.getValue());
    }

    @Test
    public void fourAppleValue() {
        sut.addItem("apple", 4);
        assertEquals(4*2.5, sut.getValue());
    }

    @Test
    public void orangeValue() {
        sut.addItem("orange", 1);
        assertEquals(1.25, sut.getValue());
    }

    @Test
    public void fourOrangeValue() {
        sut.addItem("orange", 4);
        assertEquals(4*1.25, sut.getValue());
    }

    @Test
    public void pearValue() {
        sut.addItem("pear", 1);
        assertEquals(3.00, sut.getValue());
    }

    @Test
    public void fourPearValue() {
        sut.addItem("pear", 4);
        assertEquals(4*3.00, sut.getValue());
    }

    @Test
    public void diverseBasket() {
        sut.addItem("pear", 4);
        sut.addItem("apple", 2);
        sut.addItem("pear", 4);
        sut.addItem("banana", 4);
        assertEquals(8*3.00 + 2*2.5 + 4* 4.95, sut.getValue());

        sut.addItem("orange", 1);
        assertEquals(8*3.00 + 2*2.5 + 4* 4.95 + 1*1.25, sut.getValue());
    }

    @Test
    public void clear() {
        sut.addItem("pear", 4);
        sut.addItem("apple", 2);
        sut.addItem("pear", 4);
        sut.addItem("banana", 4);
        assertEquals(8*3.00 + 2*2.5 + 4* 4.95, sut.getValue());
        sut.clear();
        assertNull(sut.getValue());
    }
}

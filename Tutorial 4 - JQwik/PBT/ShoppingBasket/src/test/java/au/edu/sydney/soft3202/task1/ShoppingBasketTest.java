/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package au.edu.sydney.soft3202.task1;

import static org.junit.jupiter.api.Assertions.*;

import net.jqwik.api.*;
import net.jqwik.api.arbitraries.*;
import net.jqwik.api.constraints.*;
import org.assertj.core.api.*;

public class ShoppingBasketTest {
  @Property
  void prop1EmptyBasketIsNull() {
       ShoppingBasket sb = new ShoppingBasket();
       Assertions.assertThat(sb.getValue()).isEqualTo(null);
  }

  @Property
  void prop1EmptyBasketIsNullA(@ForAll @Positive int n) {
       ShoppingBasket sb = new ShoppingBasket();
       String name = "apple";
       sb.addItem(name, n);
       sb.removeItem(name, n);
       Double res = sb.getValue();
       Assertions.assertThat(res).isEqualTo(null);
  }
  @Property
  void prop1EmptyBasketIsNullB(@ForAll @IntRange(min = 1, max = 10) int n) {
       ShoppingBasket sb = new ShoppingBasket();
       String name = "apple";
       sb.addItem(name, n);
       sb.removeItem(name, n);
       Double res = sb.getValue();
       Assertions.assertThat(res).isEqualTo(null);
  }

  @Provide
  Arbitrary<Integer> positive10() {
      return Arbitraries.integers().between(1, 10).filter( i -> i % 2 == 0);
  }

  @Property
  void prop1EmptyBasketIsNullC(@ForAll("positive10") int n) {
       ShoppingBasket sb = new ShoppingBasket();
       String name = "apple";
       sb.addItem(name, n);
       sb.removeItem(name, n);
       Double res = sb.getValue();
       Assertions.assertThat(res).isEqualTo(null);
  }

  @Provide
  Arbitrary<String> name() {
      return Arbitraries.of(ShoppingBasket.names);
  }

  @Property
  void prop1EmptyBasketIsNullD(@ForAll("positive10") int n, @ForAll("name") String name) {
       ShoppingBasket sb = new ShoppingBasket();
       sb.addItem(name, n);
       sb.removeItem(name, n);
       Double res = sb.getValue();
       Assertions.assertThat(res).isEqualTo(null);
  }

  @Property
  void prop1EmptyBasketIsNotNull(@ForAll("positive10") int n, @ForAll("name") String name) {
       ShoppingBasket sb = new ShoppingBasket();
       sb.addItem(name, n);
       Double res = sb.getValue();
       double d = sb.values.get(name);
       Assertions.assertThat(res).isEqualTo(d * n);
  }

  void prop1EmptyBasketIsNotNullA(@ForAll("positive10") int n, @ForAll String name) {
       ShoppingBasket sb = new ShoppingBasket();
       sb.addItem(name, n);
       Double res = sb.getValue();
       double d = sb.values.get(name);
       Assertions.assertThat(res).isEqualTo(d * n);
  }

  //@Property(tries=10)
  void prop1EmptyBasketIsNotNullB(@ForAll @Positive int n, @ForAll("name") String name) {
       ShoppingBasket sb = new ShoppingBasket();
       Assume.that(n > 1);
       Assume.that(n < 100);
       sb.addItem(name, n);
       Double res = sb.getValue();
       double d = sb.values.get(name);
       Assertions.assertThat(res).isEqualTo(d * n);
  }

  class Item {
       String name;
       int count;
       public Item(String n, int i) {
              this.name = n;
              this.count = i;
              if (i < 0) {
                  throw new IllegalArgumentException();
              }
       }
       public String toString() {
              return this.name + ":" + this.count;
       }
  }

  @Provide
  Arbitrary<Item> validItems() {
    Arbitrary<String> names = Arbitraries.of(ShoppingBasket.names);
    Arbitrary<Integer> counts = Arbitraries.integers().between(1, 10);
    return Combinators.combine(names, counts).as((name, count) -> new Item(name, count));
  }

  @Property
   public void propUseTypeA(@ForAll("validItems") Item i) {
         ShoppingBasket sb = new ShoppingBasket();
         sb.addItem(i.name, i.count);
   }


  class Item1 {
       String name;
       int count;

       public Item1(int n, int i) {
         this.name = ShoppingBasket.names[n];
         this.count = i;
         if (i <= 0) {
           throw new IllegalArgumentException();
         }
       }

       public String toString() {
              return this.name + ":" + this.count;
       }
  }

  @Property
   public void propUseTypeB(@ForAll @UseType Item1 i) {
         ShoppingBasket sb = new ShoppingBasket();
         sb.addItem(i.name, i.count);
   }

  @Provide
  Arbitrary<String> statement() {
       return Arbitraries.lazyOf(
          () -> token().map(w -> w + ";"),
          this::sentence
       );
  }
  Arbitrary<String> sentence() {
      return Combinators.combine(statement(), token()).as((s, w) -> w + "," + s);
  }

  StringArbitrary token() {
       return Arbitraries.strings().alpha().ofLength(1);
  }

  @Property
  void propSentences(@ForAll("statement") String statement) {
      Assertions.assertThat(statement.endsWith(";")).isEqualTo(true);
  }


  @Property
  void propAddItemCorrectName(@ForAll(""))




}


